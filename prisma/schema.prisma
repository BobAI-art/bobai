generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @db.Char(25)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.Char(25)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @db.Char(25)
  name          String    @unique @default(cuid()) @db.Char(190)
  email         String    @unique @db.Char(190)
  emailVerified DateTime?
  image         String?   @db.Char(190)
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// My models

model SubjectPhoto {
  id           String  @id @default(cuid())
  root         String  @db.Char(190)
  bucket       String  @db.Char(190)
  subject_slug String  @db.Char(190)
  subject      Subject @relation(fields: [subject_slug], references: [slug], onDelete: Cascade)
}

model Subject {
  id             String         @id @default(cuid()) @db.Char(25)
  slug           String         @unique @db.Char(190)
  owner          User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  created        DateTime       @default(now())
  description    String         @db.Text
  owner_id       String         @db.Char(25)
  subject_photos SubjectPhoto[]
  models         Model[]
}

model Model {
  id                String           @id @default(cuid()) @db.Char(25)
  name              String           @db.Char(190)
  owner_id          String           @db.Char(25)
  subject           Subject          @relation(fields: [subject_slug], references: [slug], onDelete: Cascade)
  subject_slug      String           @db.Char(190)
  created           DateTime         @default(now())
  state             ModelState       @default(CREATED)
  parent_model_code String           @db.Char(25)
  regularization    Json             @db.Json
  generated_photos  GeneratedPhoto[]
}

enum ModelState {
  CREATED
  TRAINING
  TRAINED
  ERROR
}

model GeneratedPhoto {
  id       String   @id @default(cuid())
  root     String   @db.Char(190)
  bucket   String   @db.Char(190)
  model_id String   @db.Char(25)
  model    Model    @relation(fields: [model_id], references: [id], onDelete: Cascade)
  prompt   String?  @db.Char(190)
  category String?  @db.Char(190)
  created  DateTime @default(now())
}
