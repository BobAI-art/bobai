generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @db.Char(25)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.Char(25)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @db.Char(25)
  name          String    @unique @default(cuid()) @db.Char(190)
  email         String    @unique @db.Char(190)
  emailVerified DateTime?
  image         String?   @db.Char(190)
  accounts      Account[]
  sessions      Session[]
  Model         Model[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TrainingPhoto {
  id   String @id @default(cuid())
  path String @db.Char(190)
  type String @db.Char(20)
}

model Model {
  id          String   @id @default(cuid()) @db.Char(25)
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  created     DateTime @default(now())
  description String   @db.Text
  ownerId     String   @db.Char(25)
}
