generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @db.Char(25)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.Char(25)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid()) @db.Char(25)
  name          String      @unique @default(cuid()) @db.Char(190)
  email         String      @unique @db.Char(190)
  emailVerified DateTime?
  image         String?     @db.Char(190)
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
  depiction     Depiction[]
  photos        Photo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// My models

model Photo {
  id      String   @id @default(cuid())
  root    String   @db.Char(190)
  bucket  String   @db.Char(190)
  prompt  String   @db.VarChar(768)
  created DateTime @default(now())

  ddim     Int     @default(50)
  width    Int     @default(512)
  height   Int     @default(512)
  guidance Decimal @default(10) @db.Decimal(3, 1)
  seed     Int     @db.UnsignedInt

  owner_id String @db.Char(25)
  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  is_public    Boolean     @default(false)
  status       PhotoStatus @default(CREATED)
  style        Style       @relation(fields: [style_slug], references: [slug])
  style_slug   String      @db.Char(24)
  depiction    Depiction?  @relation(fields: [depiction_id], references: [id])
  depiction_id String?     @db.Char(25)
  Prompt       Prompt      @relation(fields: [prompt_id], references: [id])
  prompt_id    String
}

enum PhotoStatus {
  CREATED
  GENERATING
  ERROR
  GENERATED
}

model SubjectPhoto {
  id           String  @id @default(cuid())
  root         String  @db.Char(190)
  bucket       String  @db.Char(190)
  subject_slug String  @db.Char(190)
  subject      Subject @relation(fields: [subject_slug], references: [slug], onDelete: Cascade)
  is_public    Boolean @default(false)
}

model Subject {
  id             String         @id @default(cuid()) @db.Char(25)
  slug           String         @unique @db.Char(190)
  owner          User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  created        DateTime       @default(now())
  description    String         @db.Text
  owner_id       String         @db.Char(25)
  subject_photos SubjectPhoto[]
  is_public      Boolean        @default(false)
  finished       Boolean        @default(false)
  depiction      Depiction[]
}

enum ModelState {
  CREATED
  TRAINING
  TRAINED
  ERROR
}

model PromptFragment {
  content String @id @db.Char(255)
}

model Prompt {
  id         String           @id @default(cuid())
  content    String           @unique @db.VarChar(768)
  photos     Photo[]
  categories PromptCategory[]
}

model PromptCategory {
  id      String   @id @default(cuid())
  name    String   @db.Char(190)
  prompts Prompt[]
}

model Style {
  slug          String      @id @db.Char(24)
  repo_id       String      @db.Char(190)
  file_name     String      @db.Char(190)
  order         Int         @default(0)
  description   String      @default("") @db.Text
  prompt_suffix String      @default("") @db.Char(190)
  depictions    Depiction[]
  photos        Photo[]
}

model Depiction {
  id             String     @id @default(cuid()) @db.Char(25)
  name           String     @db.Char(190)
  owner_id       String     @db.Char(25)
  owner          User       @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  subject        Subject    @relation(fields: [subject_slug], references: [slug], onDelete: Cascade)
  subject_slug   String     @db.Char(190)
  created        DateTime   @default(now())
  state          ModelState @default(CREATED)
  style_slug     String     @db.Char(25)
  style          Style      @relation(fields: [style_slug], references: [slug], onDelete: Cascade)
  regularization Json       @db.Json
  photos         Photo[]
}
